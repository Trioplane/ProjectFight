from bolt_expressions import Scoreboard

function ~/init:
    scoreboard objectives add projectfight.player.item.is_using dummy
    scoreboard objectives add projectfight.player.item.using_time dummy
    scoreboard objectives add projectfight.player.item.has_item dummy
    scoreboard objectives add projectfight.items.id dummy
    scoreboard objectives add projectfight.items.age dummy

    scoreboard objectives add projectfight.items.owner dummy

    function projectfight:items/movement/init

function ~/tick:
    execute as @e[type=item_display,tag=projectfight.items] scoreboard players add @s projectfight.items.age 1
    function projectfight:items/movement/run_movement_functions

function ~/use_item:
    execute if entity @s[tag=projectfight.player.knockback_stunned] run return 0
    scoreboard players add @s projectfight.player.item.using_time 1
    execute store result storage projectfight:items temp.player.id int 1 run scoreboard players get @s projectfight.player.id

    function projectfight:items/main/use_item/run_current_item with storage projectfight:items temp.player

function ~/use_item/tick:
    execute store result score @s projectfight.player.item.is_using run advancement revoke @s only projectfight:use_item
    execute if score @s projectfight.player.item.is_using matches 0 run scoreboard players set @s projectfight.player.item.using_time 0

    execute store result score @s projectfight.player.item.has_item run clear @s *[custom_data~{projectfight:{is_item:true}}] 0

function ~/use_item/run_current_item:
    $execute unless data storage projectfight:players "$(id)".current_item run return run tellraw @s "[ProjectFight] error: no current item."
    $function projectfight:items/main/use_item/run_item_function with storage projectfight:players "$(id)".current_item

function ~/use_item/run_item_function:
    $execute if score .hold_duration projectfight.items.config.$(item_name) matches 1.. run return run function projectfight:items/main/use_item/try_run_hold_item_function {item_name: "$(item_name)"}
    $function projectfight:items/definitions/$(item_name)/use with storage projectfight:items temp.player
    clear @s *[custom_data~{projectfight:{is_item:true}}] 1

function ~/use_item/try_run_hold_item_function:
    $execute if score @s projectfight.player.item.using_time < .hold_duration projectfight.items.config.$(item_name) run return fail
    $function projectfight:items/definitions/$(item_name)/use with storage projectfight:items temp.player
    clear @s *[custom_data~{projectfight:{is_item:true}}] 1

function ~/give_id:
    execute store result score @s projectfight.items.id run scoreboard players add .projectfight.var.nextid projectfight.items.id 1

function ~/give_item:
    execute store result storage projectfight:items temp.player.id int 1 run scoreboard players get @s projectfight.player.id
    $data modify storage projectfight:items temp.player.item_to_give set value "$(item)"
    function ~/set_item with storage projectfight:items temp.player
    $give @s amethyst_shard[custom_data={projectfight:{is_item:true}},consumable={consume_seconds:99999999},item_name={translate:"projectfight.items.$(item)"},item_model="projectfight:items/$(item)"]
    $tellraw @s [{text:"You got "},{translate:"projectfight.items.$(item)"}]

function ~/give_item/set_item:
    $data modify storage projectfight:players "$(id)".current_item.item_name set value "$(item_to_give)"

advancement projectfight:use_item {
  "criteria": {
    "use_item": {
      "trigger": "minecraft:using_item",
      "conditions": {
        "item": {
          "predicates": {
            "minecraft:custom_data": {
              "projectfight": { "is_item": true }
            }
          }
        }
      }
    }
  },
  "rewards": {
    "function": "projectfight:items/main/use_item"
  }
}

class Item:
    def __init__(self, item_name, config):
        self.item_name = item_name
        self.config = config

    def use(self):
        tag @s add projectfight.player.items.temp.owner

        execute anchored eyes at @s: 
            summon marker ^ ^ ^5 {Tags:["projectfight.utils.temp"]}
            summon item_display ^ ^ ^1 {
                Tags: [f"projectfight.items.{self.item_name}", "projectfight.items", "projectfight.items.temp",],
                item: { id: "popped_chorus_fruit", components: { item_model: f"projectfight:items/{self.item_name}" } },
                teleport_duration: 2
            }

        kill @n[type=marker,tag=projectfight.utils.temp]
        tag @n[type=item_display,tag=projectfight.items.temp] remove projectfight.items.temp
        tag @s remove projectfight.player.items.temp.owner

    def movement_step(self):
        execute if function projectfight:items/collision/check/basic run function f"projectfight:items/definitions/{self.item_name}/on_impact"
    
    def on_impact(self):
        tag @s add projectfight.items.temp.impact
        execute as @a if score @s projectfight.player.id = @n[type=item_display,tag=projectfight.items.temp.impact] projectfight.items.owner:
            tag @s add projectfight.player.temp.attacker
    
        execute as @a[distance=(None, self.config.on_impact.aoe_range)]:
            tag @s add projectfight.player.temp.victim
            scoreboard players set @s projectfight.player.damage_to_deal self.config.on_impact.damage
    
        function projectfight:player/health/apply_damage
    
        kill @s
    
    def build(self):
        function f"projectfight:items/definitions/{self.item_name}/use":
            self.use()
        
        function f"projectfight:items/definitions/{self.item_name}/movement_step":
            self.movement_step()

        function f"projectfight:items/definitions/{self.item_name}/on_impact":
            self.on_impact()

        append function projectfight:items/main/tick:
            execute as @e[type=item_display,tag=f"projectfight.items.{self.item_name}"] at @s run function f"projectfight:items/definitions/{self.item_name}/movement_step"