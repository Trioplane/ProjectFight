from ../main import Item
from projectfight:player/movement import KNOCKBACK_PUSH_VECTOR_ENTITY
from bolt_expressions import Scoreboard

class ItemGenericThrowable(Item):
    def __init__(self, item_name, config, insert_on_use = None, insert_on_movement_step = None, insert_on_impact = None):
        super().__init__(item_name, config)
        self.insert_on_use = insert_on_use
        self.insert_on_movement_step = insert_on_movement_step
        self.insert_on_impact = insert_on_impact
    
    def use(self):
        tag @s add projectfight.player.items.temp.owner

        execute anchored eyes at @s: 
            summon marker ^ ^ ^5 {Tags:["projectfight.utils.temp"]}
            summon item_display ^ ^ ^1 {
                Tags: [f"projectfight.items.{self.item_name}", "projectfight.items", "projectfight.items.temp",],
                item: { id: "popped_chorus_fruit", components: { item_model: f"projectfight:items/{self.item_name}" } },
                teleport_duration: 2
            }

        execute as @n[type=item_display,tag=projectfight.items.temp]: 
            rotate @s facing entity @n[type=marker,tag=projectfight.utils.temp]

            scoreboard players set @s projectfight.items.velocity.horizontal self.config.init_velocity.horizontal
            scoreboard players set @s projectfight.items.velocity.vertical self.config.init_velocity.vertical
            scoreboard players set @s projectfight.items.velocity.sideward self.config.init_velocity.sideward

            function projectfight:items/main/give_id
            scoreboard players operation @s projectfight.items.owner = @p[tag=projectfight.player.items.temp.owner] projectfight.player.id

        summon item_display 0 0 0 {Tags:["projectfight.items.initial_rotation","projectfight.items.initial_rotation.temp"]}
        execute as @n[type=item_display,tag=projectfight.items.initial_rotation.temp]:
            execute rotated as @n[type=item_display,tag=projectfight.items.temp] run rotate @s ~ ~
            scoreboard players operation @s projectfight.items.owner = @n[type=item_display,tag=projectfight.items.temp] projectfight.items.id
            tag @s remove projectfight.items.initial_rotation.temp

        if self.insert_on_use: 
            self.insert_on_use(self)

        kill @n[type=marker,tag=projectfight.utils.temp]
        tag @n[type=item_display,tag=projectfight.items.temp] remove projectfight.items.temp
        tag @s remove projectfight.player.items.temp.owner

    def movement_step(self):
        execute at @s if function projectfight:items/collision/check/basic run return run function f"projectfight:items/definitions/{self.item_name}/on_impact"

        if self.insert_on_movement_step: 
            self.insert_on_movement_step(self)

        execute store result storage projectfight:items temp.item.velocity.horizontal float 0.001 run scoreboard players get @s projectfight.items.velocity.horizontal
        execute store result storage projectfight:items temp.item.velocity.vertical float 0.001 run scoreboard players get @s projectfight.items.velocity.vertical
        execute store result storage projectfight:items temp.item.velocity.sideward float 0.001 run scoreboard players get @s projectfight.items.velocity.sideward

        function projectfight:items/movement/move/gravity with storage projectfight:items temp.item.velocity

        execute unless score @s projectfight.items.velocity.horizontal matches ..0:
            if self.config.acceleration.horizontal < 0:
                scoreboard players remove @s projectfight.items.velocity.horizontal (self.config.acceleration.horizontal * -1)
            else:
                scoreboard players add @s projectfight.items.velocity.horizontal self.config.acceleration.horizontal
    
        execute unless score @s projectfight.items.velocity.vertical matches ..-2000:
            if self.config.acceleration.vertical < 0:
                scoreboard players remove @s projectfight.items.velocity.vertical (self.config.acceleration.vertical * -1)
            else:
                scoreboard players add @s projectfight.items.velocity.vertical self.config.acceleration.vertical

        if self.config.acceleration.sideward < 0:
            scoreboard players remove @s projectfight.items.velocity.sideward (self.config.acceleration.sideward * -1)
        else:
            scoreboard players add @s projectfight.items.velocity.sideward self.config.acceleration.sideward

    def on_impact(self):
        tag @s add projectfight.items.temp.impact
        execute as @a if score @s projectfight.player.id = @n[type=item_display,tag=projectfight.items.temp.impact] projectfight.items.owner:
            tag @s add projectfight.player.temp.attacker
    
        execute as @a[distance=(None, self.config.on_impact.aoe_range)]:
            tag @s add projectfight.player.temp.victim
            scoreboard players add @s projectfight.player.damage_to_deal self.config.on_impact.damage
            execute
                facing entity @s eyes 
                positioned 0.0 0.0 0.0 
                run tp KNOCKBACK_PUSH_VECTOR_ENTITY ^ ^ ^self.config.on_impact.knockback_strength ~ ~
            function projectfight:player/movement/knockback/apply

        function projectfight:player/health/apply_damage        

        if self.insert_on_impact:
            self.insert_on_impact(self)
    
        execute as @e[type=item_display,tag=projectfight.items.initial_rotation] if score @s projectfight.items.owner = @n[type=item_display,tag=projectfight.items.temp.impact] projectfight.items.id:
            kill @s
    
        kill @s

ItemGenericThrowable("generic_throwable", {
    init_velocity: {
        horizontal: 1500,
        vertical: 0,
        sideward: 0
    },
    acceleration: {
        horizontal: -10,
        vertical: -40,
        sideward: 0
    },
    on_impact: {
        aoe_range: 5,
        knockback_strength: 20,
        damage: 25
    }
}).build()